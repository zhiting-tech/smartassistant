// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: disk_manager.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PhysicalVolumeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PVS []*PhysicalVolume `protobuf:"bytes,1,rep,name=PVS,proto3" json:"PVS,omitempty"`
}

func (x *PhysicalVolumeListResp) Reset() {
	*x = PhysicalVolumeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalVolumeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalVolumeListResp) ProtoMessage() {}

func (x *PhysicalVolumeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalVolumeListResp.ProtoReflect.Descriptor instead.
func (*PhysicalVolumeListResp) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{0}
}

func (x *PhysicalVolumeListResp) GetPVS() []*PhysicalVolume {
	if x != nil {
		return x.PVS
	}
	return nil
}

type VolumeGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGS []*VolumeGroup `protobuf:"bytes,3,rep,name=VGS,proto3" json:"VGS,omitempty"`
}

func (x *VolumeGroupListResp) Reset() {
	*x = VolumeGroupListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGroupListResp) ProtoMessage() {}

func (x *VolumeGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGroupListResp.ProtoReflect.Descriptor instead.
func (*VolumeGroupListResp) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{1}
}

func (x *VolumeGroupListResp) GetVGS() []*VolumeGroup {
	if x != nil {
		return x.VGS
	}
	return nil
}

type VolumeGroupCreateOrExtendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGName string `protobuf:"bytes,1,opt,name=VGName,proto3" json:"VGName,omitempty"`
	PVName string `protobuf:"bytes,2,opt,name=PVName,proto3" json:"PVName,omitempty"`
}

func (x *VolumeGroupCreateOrExtendReq) Reset() {
	*x = VolumeGroupCreateOrExtendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeGroupCreateOrExtendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGroupCreateOrExtendReq) ProtoMessage() {}

func (x *VolumeGroupCreateOrExtendReq) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGroupCreateOrExtendReq.ProtoReflect.Descriptor instead.
func (*VolumeGroupCreateOrExtendReq) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{2}
}

func (x *VolumeGroupCreateOrExtendReq) GetVGName() string {
	if x != nil {
		return x.VGName
	}
	return ""
}

func (x *VolumeGroupCreateOrExtendReq) GetPVName() string {
	if x != nil {
		return x.PVName
	}
	return ""
}

type VolumeGroupRenameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldName string `protobuf:"bytes,1,opt,name=OldName,proto3" json:"OldName,omitempty"`
	NewName string `protobuf:"bytes,2,opt,name=NewName,proto3" json:"NewName,omitempty"`
}

func (x *VolumeGroupRenameReq) Reset() {
	*x = VolumeGroupRenameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeGroupRenameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGroupRenameReq) ProtoMessage() {}

func (x *VolumeGroupRenameReq) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGroupRenameReq.ProtoReflect.Descriptor instead.
func (*VolumeGroupRenameReq) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{3}
}

func (x *VolumeGroupRenameReq) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *VolumeGroupRenameReq) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type VolumeGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *VolumeGroup `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *VolumeGroupResp) Reset() {
	*x = VolumeGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGroupResp) ProtoMessage() {}

func (x *VolumeGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGroupResp.ProtoReflect.Descriptor instead.
func (*VolumeGroupResp) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{4}
}

func (x *VolumeGroupResp) GetData() *VolumeGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

type MountPhysicalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PVName string `protobuf:"bytes,1,opt,name=PVName,proto3" json:"PVName,omitempty"`
}

func (x *MountPhysicalReq) Reset() {
	*x = MountPhysicalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPhysicalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPhysicalReq) ProtoMessage() {}

func (x *MountPhysicalReq) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPhysicalReq.ProtoReflect.Descriptor instead.
func (*MountPhysicalReq) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{5}
}

func (x *MountPhysicalReq) GetPVName() string {
	if x != nil {
		return x.PVName
	}
	return ""
}

type VolumeGroupRemoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGName string `protobuf:"bytes,1,opt,name=VGName,proto3" json:"VGName,omitempty"`
}

func (x *VolumeGroupRemoveReq) Reset() {
	*x = VolumeGroupRemoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeGroupRemoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGroupRemoveReq) ProtoMessage() {}

func (x *VolumeGroupRemoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGroupRemoveReq.ProtoReflect.Descriptor instead.
func (*VolumeGroupRemoveReq) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeGroupRemoveReq) GetVGName() string {
	if x != nil {
		return x.VGName
	}
	return ""
}

type LogicalVolumeCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGName string `protobuf:"bytes,1,opt,name=VGName,proto3" json:"VGName,omitempty"`
	LVName string `protobuf:"bytes,2,opt,name=LVName,proto3" json:"LVName,omitempty"`
	// 逻辑分区大小，以MB计算
	SizeM int64 `protobuf:"varint,3,opt,name=SizeM,proto3" json:"SizeM,omitempty"`
}

func (x *LogicalVolumeCreateReq) Reset() {
	*x = LogicalVolumeCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalVolumeCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalVolumeCreateReq) ProtoMessage() {}

func (x *LogicalVolumeCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalVolumeCreateReq.ProtoReflect.Descriptor instead.
func (*LogicalVolumeCreateReq) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{7}
}

func (x *LogicalVolumeCreateReq) GetVGName() string {
	if x != nil {
		return x.VGName
	}
	return ""
}

func (x *LogicalVolumeCreateReq) GetLVName() string {
	if x != nil {
		return x.LVName
	}
	return ""
}

func (x *LogicalVolumeCreateReq) GetSizeM() int64 {
	if x != nil {
		return x.SizeM
	}
	return 0
}

type LogicalVolumeRenameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGName    string `protobuf:"bytes,1,opt,name=VGName,proto3" json:"VGName,omitempty"`
	LVName    string `protobuf:"bytes,2,opt,name=LVName,proto3" json:"LVName,omitempty"`
	NewLVName string `protobuf:"bytes,3,opt,name=NewLVName,proto3" json:"NewLVName,omitempty"`
}

func (x *LogicalVolumeRenameReq) Reset() {
	*x = LogicalVolumeRenameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalVolumeRenameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalVolumeRenameReq) ProtoMessage() {}

func (x *LogicalVolumeRenameReq) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalVolumeRenameReq.ProtoReflect.Descriptor instead.
func (*LogicalVolumeRenameReq) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{8}
}

func (x *LogicalVolumeRenameReq) GetVGName() string {
	if x != nil {
		return x.VGName
	}
	return ""
}

func (x *LogicalVolumeRenameReq) GetLVName() string {
	if x != nil {
		return x.LVName
	}
	return ""
}

func (x *LogicalVolumeRenameReq) GetNewLVName() string {
	if x != nil {
		return x.NewLVName
	}
	return ""
}

type LogicalVolumeExtendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGName string `protobuf:"bytes,1,opt,name=VGName,proto3" json:"VGName,omitempty"`
	LVName string `protobuf:"bytes,2,opt,name=LVName,proto3" json:"LVName,omitempty"`
	// 逻辑分区大小，以MiB计算
	NewSizeM int64 `protobuf:"varint,3,opt,name=NewSizeM,proto3" json:"NewSizeM,omitempty"`
}

func (x *LogicalVolumeExtendReq) Reset() {
	*x = LogicalVolumeExtendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalVolumeExtendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalVolumeExtendReq) ProtoMessage() {}

func (x *LogicalVolumeExtendReq) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalVolumeExtendReq.ProtoReflect.Descriptor instead.
func (*LogicalVolumeExtendReq) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{9}
}

func (x *LogicalVolumeExtendReq) GetVGName() string {
	if x != nil {
		return x.VGName
	}
	return ""
}

func (x *LogicalVolumeExtendReq) GetLVName() string {
	if x != nil {
		return x.LVName
	}
	return ""
}

func (x *LogicalVolumeExtendReq) GetNewSizeM() int64 {
	if x != nil {
		return x.NewSizeM
	}
	return 0
}

type LogicalVolumeRemoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGName string `protobuf:"bytes,1,opt,name=VGName,proto3" json:"VGName,omitempty"`
	LVName string `protobuf:"bytes,2,opt,name=LVName,proto3" json:"LVName,omitempty"`
}

func (x *LogicalVolumeRemoveReq) Reset() {
	*x = LogicalVolumeRemoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalVolumeRemoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalVolumeRemoveReq) ProtoMessage() {}

func (x *LogicalVolumeRemoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalVolumeRemoveReq.ProtoReflect.Descriptor instead.
func (*LogicalVolumeRemoveReq) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{10}
}

func (x *LogicalVolumeRemoveReq) GetVGName() string {
	if x != nil {
		return x.VGName
	}
	return ""
}

func (x *LogicalVolumeRemoveReq) GetLVName() string {
	if x != nil {
		return x.LVName
	}
	return ""
}

type LogicalVolumeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *LogicalVolume `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *LogicalVolumeResp) Reset() {
	*x = LogicalVolumeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalVolumeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalVolumeResp) ProtoMessage() {}

func (x *LogicalVolumeResp) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalVolumeResp.ProtoReflect.Descriptor instead.
func (*LogicalVolumeResp) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{11}
}

func (x *LogicalVolumeResp) GetData() *LogicalVolume {
	if x != nil {
		return x.Data
	}
	return nil
}

// 储存池
type VolumeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Exported bool              `protobuf:"varint,2,opt,name=Exported,proto3" json:"Exported,omitempty"`
	Size     int64             `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	FreeSize int64             `protobuf:"varint,4,opt,name=FreeSize,proto3" json:"FreeSize,omitempty"`
	UUID     string            `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`
	LVS      []*LogicalVolume  `protobuf:"bytes,6,rep,name=LVS,proto3" json:"LVS,omitempty"`
	PVS      []*PhysicalVolume `protobuf:"bytes,7,rep,name=PVS,proto3" json:"PVS,omitempty"`
}

func (x *VolumeGroup) Reset() {
	*x = VolumeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGroup) ProtoMessage() {}

func (x *VolumeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGroup.ProtoReflect.Descriptor instead.
func (*VolumeGroup) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{12}
}

func (x *VolumeGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeGroup) GetExported() bool {
	if x != nil {
		return x.Exported
	}
	return false
}

func (x *VolumeGroup) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VolumeGroup) GetFreeSize() int64 {
	if x != nil {
		return x.FreeSize
	}
	return 0
}

func (x *VolumeGroup) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *VolumeGroup) GetLVS() []*LogicalVolume {
	if x != nil {
		return x.LVS
	}
	return nil
}

func (x *VolumeGroup) GetPVS() []*PhysicalVolume {
	if x != nil {
		return x.PVS
	}
	return nil
}

// 逻辑分区
type LogicalVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	VGName   string `protobuf:"bytes,2,opt,name=VGName,proto3" json:"VGName,omitempty"`
	Size     int64  `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	FreeSize int64  `protobuf:"varint,4,opt,name=FreeSize,proto3" json:"FreeSize,omitempty"`
	Path     string `protobuf:"bytes,5,opt,name=Path,proto3" json:"Path,omitempty"`
	UUID     string `protobuf:"bytes,6,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *LogicalVolume) Reset() {
	*x = LogicalVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalVolume) ProtoMessage() {}

func (x *LogicalVolume) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalVolume.ProtoReflect.Descriptor instead.
func (*LogicalVolume) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{13}
}

func (x *LogicalVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicalVolume) GetVGName() string {
	if x != nil {
		return x.VGName
	}
	return ""
}

func (x *LogicalVolume) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LogicalVolume) GetFreeSize() int64 {
	if x != nil {
		return x.FreeSize
	}
	return 0
}

func (x *LogicalVolume) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LogicalVolume) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

// 物理分区
type PhysicalVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	VGName    string `protobuf:"bytes,2,opt,name=VGName,proto3" json:"VGName,omitempty"` // 如果为空，则是未加入的分区
	Size      int64  `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	UUID      string `protobuf:"bytes,4,opt,name=UUID,proto3" json:"UUID,omitempty"`
	MetaData  string `protobuf:"bytes,5,opt,name=MetaData,proto3" json:"MetaData,omitempty"`
	IsMounted bool   `protobuf:"varint,6,opt,name=IsMounted,proto3" json:"IsMounted,omitempty"`
}

func (x *PhysicalVolume) Reset() {
	*x = PhysicalVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalVolume) ProtoMessage() {}

func (x *PhysicalVolume) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalVolume.ProtoReflect.Descriptor instead.
func (*PhysicalVolume) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{14}
}

func (x *PhysicalVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhysicalVolume) GetVGName() string {
	if x != nil {
		return x.VGName
	}
	return ""
}

func (x *PhysicalVolume) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PhysicalVolume) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *PhysicalVolume) GetMetaData() string {
	if x != nil {
		return x.MetaData
	}
	return ""
}

func (x *PhysicalVolume) GetIsMounted() bool {
	if x != nil {
		return x.IsMounted
	}
	return false
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ErrorResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ErrorResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disk_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_disk_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_disk_manager_proto_rawDescGZIP(), []int{16}
}

var File_disk_manager_proto protoreflect.FileDescriptor

var file_disk_manager_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x16, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x03, 0x50, 0x56, 0x53, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x03, 0x50, 0x56, 0x53, 0x22, 0x3b,
	0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x03, 0x56, 0x47, 0x53, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x03, 0x56, 0x47, 0x53, 0x22, 0x4e, 0x0a, 0x1c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x56,
	0x47, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x47, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x2a, 0x0a, 0x10, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x56, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e,
	0x0a, 0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e,
	0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x47, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4c, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4c, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x69, 0x7a, 0x65,
	0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x22, 0x66,
	0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x47, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4c, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4c, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x4c,
	0x56, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x77,
	0x4c, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x56, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x56, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x22, 0x48, 0x0a, 0x16,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4c, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4c, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x72, 0x65,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x03, 0x4c, 0x56, 0x53,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x03, 0x4c, 0x56,
	0x53, 0x12, 0x27, 0x0a, 0x03, 0x50, 0x56, 0x53, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x03, 0x50, 0x56, 0x53, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x46, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa5, 0x07, 0x0a, 0x0b,
	0x44, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x12, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b,
	0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a,
	0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x48, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x11, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x13, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x13, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a,
	0x13, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x36, 0x0a, 0x0d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x55, 0x6e, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_disk_manager_proto_rawDescOnce sync.Once
	file_disk_manager_proto_rawDescData = file_disk_manager_proto_rawDesc
)

func file_disk_manager_proto_rawDescGZIP() []byte {
	file_disk_manager_proto_rawDescOnce.Do(func() {
		file_disk_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_disk_manager_proto_rawDescData)
	})
	return file_disk_manager_proto_rawDescData
}

var file_disk_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_disk_manager_proto_goTypes = []interface{}{
	(*PhysicalVolumeListResp)(nil),       // 0: proto.PhysicalVolumeListResp
	(*VolumeGroupListResp)(nil),          // 1: proto.VolumeGroupListResp
	(*VolumeGroupCreateOrExtendReq)(nil), // 2: proto.VolumeGroupCreateOrExtendReq
	(*VolumeGroupRenameReq)(nil),         // 3: proto.VolumeGroupRenameReq
	(*VolumeGroupResp)(nil),              // 4: proto.VolumeGroupResp
	(*MountPhysicalReq)(nil),             // 5: proto.MountPhysicalReq
	(*VolumeGroupRemoveReq)(nil),         // 6: proto.VolumeGroupRemoveReq
	(*LogicalVolumeCreateReq)(nil),       // 7: proto.LogicalVolumeCreateReq
	(*LogicalVolumeRenameReq)(nil),       // 8: proto.LogicalVolumeRenameReq
	(*LogicalVolumeExtendReq)(nil),       // 9: proto.LogicalVolumeExtendReq
	(*LogicalVolumeRemoveReq)(nil),       // 10: proto.LogicalVolumeRemoveReq
	(*LogicalVolumeResp)(nil),            // 11: proto.LogicalVolumeResp
	(*VolumeGroup)(nil),                  // 12: proto.VolumeGroup
	(*LogicalVolume)(nil),                // 13: proto.LogicalVolume
	(*PhysicalVolume)(nil),               // 14: proto.PhysicalVolume
	(*ErrorResponse)(nil),                // 15: proto.ErrorResponse
	(*Empty)(nil),                        // 16: proto.empty
}
var file_disk_manager_proto_depIdxs = []int32{
	14, // 0: proto.PhysicalVolumeListResp.PVS:type_name -> proto.PhysicalVolume
	12, // 1: proto.VolumeGroupListResp.VGS:type_name -> proto.VolumeGroup
	12, // 2: proto.VolumeGroupResp.Data:type_name -> proto.VolumeGroup
	13, // 3: proto.LogicalVolumeResp.Data:type_name -> proto.LogicalVolume
	13, // 4: proto.VolumeGroup.LVS:type_name -> proto.LogicalVolume
	14, // 5: proto.VolumeGroup.PVS:type_name -> proto.PhysicalVolume
	16, // 6: proto.DiskManager.PhysicalVolumeList:input_type -> proto.empty
	16, // 7: proto.DiskManager.VolumeGroupList:input_type -> proto.empty
	2,  // 8: proto.DiskManager.VolumeGroupCreate:input_type -> proto.VolumeGroupCreateOrExtendReq
	2,  // 9: proto.DiskManager.VolumeGroupExtend:input_type -> proto.VolumeGroupCreateOrExtendReq
	3,  // 10: proto.DiskManager.VolumeGroupRename:input_type -> proto.VolumeGroupRenameReq
	6,  // 11: proto.DiskManager.VolumeGroupRemove:input_type -> proto.VolumeGroupRemoveReq
	7,  // 12: proto.DiskManager.LogicalVolumeCreate:input_type -> proto.LogicalVolumeCreateReq
	8,  // 13: proto.DiskManager.LogicalVolumeRename:input_type -> proto.LogicalVolumeRenameReq
	9,  // 14: proto.DiskManager.LogicalVolumeExtend:input_type -> proto.LogicalVolumeExtendReq
	10, // 15: proto.DiskManager.LogicalVolumeRemove:input_type -> proto.LogicalVolumeRemoveReq
	16, // 16: proto.DiskManager.PhysicalMountedList:input_type -> proto.empty
	5,  // 17: proto.DiskManager.MountPhysical:input_type -> proto.MountPhysicalReq
	5,  // 18: proto.DiskManager.UnmountPhysical:input_type -> proto.MountPhysicalReq
	0,  // 19: proto.DiskManager.PhysicalVolumeList:output_type -> proto.PhysicalVolumeListResp
	1,  // 20: proto.DiskManager.VolumeGroupList:output_type -> proto.VolumeGroupListResp
	4,  // 21: proto.DiskManager.VolumeGroupCreate:output_type -> proto.VolumeGroupResp
	4,  // 22: proto.DiskManager.VolumeGroupExtend:output_type -> proto.VolumeGroupResp
	4,  // 23: proto.DiskManager.VolumeGroupRename:output_type -> proto.VolumeGroupResp
	16, // 24: proto.DiskManager.VolumeGroupRemove:output_type -> proto.empty
	11, // 25: proto.DiskManager.LogicalVolumeCreate:output_type -> proto.LogicalVolumeResp
	11, // 26: proto.DiskManager.LogicalVolumeRename:output_type -> proto.LogicalVolumeResp
	11, // 27: proto.DiskManager.LogicalVolumeExtend:output_type -> proto.LogicalVolumeResp
	16, // 28: proto.DiskManager.LogicalVolumeRemove:output_type -> proto.empty
	0,  // 29: proto.DiskManager.PhysicalMountedList:output_type -> proto.PhysicalVolumeListResp
	16, // 30: proto.DiskManager.MountPhysical:output_type -> proto.empty
	16, // 31: proto.DiskManager.UnmountPhysical:output_type -> proto.empty
	19, // [19:32] is the sub-list for method output_type
	6,  // [6:19] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_disk_manager_proto_init() }
func file_disk_manager_proto_init() {
	if File_disk_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_disk_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalVolumeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeGroupListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeGroupCreateOrExtendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeGroupRenameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPhysicalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeGroupRemoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalVolumeCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalVolumeRenameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalVolumeExtendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalVolumeRemoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalVolumeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disk_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_disk_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_disk_manager_proto_goTypes,
		DependencyIndexes: file_disk_manager_proto_depIdxs,
		MessageInfos:      file_disk_manager_proto_msgTypes,
	}.Build()
	File_disk_manager_proto = out.File
	file_disk_manager_proto_rawDesc = nil
	file_disk_manager_proto_goTypes = nil
	file_disk_manager_proto_depIdxs = nil
}
